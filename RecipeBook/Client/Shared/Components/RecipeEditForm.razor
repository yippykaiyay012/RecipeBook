@using RecipeBook.Shared.Models
@using RecipeBook.Client.Shared.Components
@inject HttpClient http


@if (Recipe == null)
{
    <Loading />
}
else
{
<div class="row">
    <div class="justify-content-center col-lg-8 offset-lg-2">
        <EditForm Model="Recipe" OnValidSubmit="(() => Submitted.InvokeAsync(Recipe))">
            <DataAnnotationsValidator />
            <div class="form-group mt-3">
                <div class="create-section shadow-custom">
                    <h2 class="mt-3">Details</h2>
                    <label for="title">Title</label>
                    <ValidationMessage For="(() => Recipe.Title)" />
                    <input @bind="Recipe.Title" class="form-control mb-2" type="text" id="title" placeholder="Title" />
                    <label for="description">Description</label>
                    <ValidationMessage For="(() => Recipe.Description)" />
                    <textarea @bind="Recipe.Description" style="height:10rem" class="form-control mb-2" type="text" id="description" placeholder="Description" />
                    <label for="iconURL">Icon URL</label>
                    <input @bind="Recipe.IconURL" class="form-control mb-2" type="text" id="iconURL" placeholder="Icon URL" />
                </div>

                <div class="create-section shadow-custom">
                    <h2 class="mt-3">Add Ingredients</h2>
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th class="text-center">Measurement</th>
                                <th class="text-center">Ingredient</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var ingr in Recipe.Ingredients)
                            {
                                <tr>
                                    <td><input class="w-100 form-control text-center" @bind="@ingr.Measurement" /></td>
                                    <td><input class="w-100 form-control text-center" @bind="@ingr.Name" /></td>
                                </tr>
                            }
                        </tbody>
                    </table>
                    <a @onclick="AddIngredient" class="btn btn-custom text-white form-control mt-2">Add Ingredient</a>
                </div>

                <div class="create-section shadow-custom">
                    <h2 class="mt-3">Add Steps</h2>

                    @foreach (var step in Recipe.Steps)
                    {


                        <h4>Step: @step.StepNumber</h4>
                        <label for="heading-@step.StepNumber">Heading</label>
                        <input class="form-control  mb-2" @bind="@step.Heading" type="text" id="heading-@step.StepNumber" placeholder="Heading" />
                        <label for="content-@step.StepNumber">Content</label>
                        <textarea class="form-control mb-2" style="height:10rem" @bind="@step.Content" id="content-@step.StepNumber" placeholder="Content" />
                    }
                    <a @onclick="AddNewStep" class="btn btn-custom text-white form-control mt-2">Add Step</a>
                </div>

            </div>


            <div class="form-inline float-right mb-3">
                <a href="/" class="btn btn-danger form-control mt-2">Cancel</a>
                @*<a @onclick="(() => Submitted.InvokeAsync(Recipe))" class="btn btn-custom form-control mt-2 ml-3">Save</a>*@
                <button type="submit" class="btn btn-custom form-control mt-2 ml-3">Save</button>

            </div>
        </EditForm>
    </div>
</div>
}

@code {

    [Parameter]
    public int Id { get; set; }

    [Parameter]
    public Recipe Recipe { get; set; }


    [Parameter]
    public EventCallback<Recipe> Submitted { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if(Id != 0)
        {
            Recipe = await http.GetJsonAsync<Recipe>($"/api/recipes/{Id}");
        }
    }





    void AddNewStep()
    {
        Recipe.Steps.Add(new Step() { StepNumber = Recipe.Steps.Count + 1 });
        //  steps.Add(new Step() { StepNumber = steps.Count + 1 });


    }

    void AddIngredient()
    {
        Recipe.Ingredients.Add(new Ingredient());

    }
}
